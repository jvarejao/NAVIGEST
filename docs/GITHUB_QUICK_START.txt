╔═══════════════════════════════════════════════════════════════════════════╗
║                  GITHUB + NAVIGEST - COMEÇAR AGORA                        ║
║                                                                           ║
║         Guia prático para iniciantes - Siga linha por linha               ║
╚═══════════════════════════════════════════════════════════════════════════╝

⏰ TEMPO TOTAL: ~30 minutos

═══════════════════════════════════════════════════════════════════════════

📋 RESUMO DO PLANO
═══════════════════════════════════════════════════════════════════════════

1. Criar pasta NAVIGEST no seu Mac               (1 min)
2. Inicializar Git                               (1 min)
3. Criar .gitignore e README.md                  (3 min)
4. Fazer primeiro commit                         (2 min)
5. Criar repositório no GitHub.com               (3 min)
6. Conectar GitHub ao seu computador             (3 min)
7. Fazer push para GitHub                        (2 min)
8. Verificar no GitHub                           (2 min)

═══════════════════════════════════════════════════════════════════════════

🚀 COMEÇAR AGORA - COPIE E EXECUTE ISTO NO TERMINAL
═══════════════════════════════════════════════════════════════════════════

┌─────────────────────────────────────────────────────────────────────────┐
│ PASSO 1: Criar pasta NAVIGEST                                           │
└─────────────────────────────────────────────────────────────────────────┘

COPIE E EXECUTE:

cd /Users/joaovarejao/Dev
mkdir NAVIGEST
cd NAVIGEST
pwd

DEVE APARECER: /Users/joaovarejao/Dev/NAVIGEST

┌─────────────────────────────────────────────────────────────────────────┐
│ PASSO 2: Inicializar Git                                                │
└─────────────────────────────────────────────────────────────────────────┘

COPIE E EXECUTE:

git init
ls -la

DEVE APARECER UMA PASTA ESCONDIDA .git

┌─────────────────────────────────────────────────────────────────────────┐
│ PASSO 3: Criar .gitignore (diz ao Git o que ignorar)                   │
└─────────────────────────────────────────────────────────────────────────┘

COPIE E EXECUTE (TODO de uma vez):

cat > .gitignore << 'IGNORE'
bin/
obj/
*.dll
packages/
.vs/
.vscode/
*.suo
*.user
.DS_Store
*.log
appsettings.local.json
IGNORE

VERIFICAR:

cat .gitignore

DEVE APARECER: conteúdo do ficheiro

┌─────────────────────────────────────────────────────────────────────────┐
│ PASSO 4: Criar README.md (documentação do projeto)                      │
└─────────────────────────────────────────────────────────────────────────┘

COPIE E EXECUTE (TODO de uma vez):

cat > README.md << 'README'
# NAVIGEST

Multi-platform mobile and desktop application.

## Structure
- NAVIGEST.Shared - Common code
- NAVIGEST.iOS - iOS with Face ID
- NAVIGEST.Android - Android with Fingerprint
- NAVIGEST.Windows - Windows desktop

## Build
```bash
dotnet build
```
README

VERIFICAR:

cat README.md

DEVE APARECER: conteúdo do ficheiro

┌─────────────────────────────────────────────────────────────────────────┐
│ PASSO 5: Ver o que mudou                                                │
└─────────────────────────────────────────────────────────────────────────┘

COPIE E EXECUTE:

git status

DEVE APARECER:
  Untracked files:
    .gitignore
    README.md

┌─────────────────────────────────────────────────────────────────────────┐
│ PASSO 6: Adicionar ficheiros ao commit                                  │
└─────────────────────────────────────────────────────────────────────────┘

COPIE E EXECUTE:

git add .

VERIFICAR:

git status

DEVE MOSTRAR:
  Changes to be committed:
    new file:   .gitignore
    new file:   README.md

┌─────────────────────────────────────────────────────────────────────────┐
│ PASSO 7: Criar commit (guardar checkpoint)                              │
└─────────────────────────────────────────────────────────────────────────┘

COPIE E EXECUTE:

git commit -m "Initial commit: project structure"

DEVE APARECER:
  [main 1234abc] Initial commit: project structure
   2 files changed, 20 insertions(+)

┌─────────────────────────────────────────────────────────────────────────┐
│ PASSO 8: Ver histórico                                                  │
└─────────────────────────────────────────────────────────────────────────┘

COPIE E EXECUTE:

git log --oneline

DEVE APARECER:
  1234abc Initial commit: project structure

═══════════════════════════════════════════════════════════════════════════

⏸️ PARAR AQUI TEMPORARIAMENTE

Agora tem que criar repositório no GitHub.com

═══════════════════════════════════════════════════════════════════════════

🌐 CRIAR REPOSITÓRIO NO GITHUB.COM
═══════════════════════════════════════════════════════════════════════════

1. Abra navegador: https://github.com

2. Login com sua conta GitHub

3. Clique no + (canto superior) → New repository

4. Preencha:
   Repository name:        NAVIGEST
   Description:            Multi-platform mobile and desktop app
   Public / Private:       escolha um (recomendo Public)
   Initialize with README: DESMARQUE (deixe em branco)

5. Clique "Create repository"

6. COPIE a URL que aparece:
   
   https://github.com/SEU-USERNAME/NAVIGEST.git
   
   (mude SEU-USERNAME para o seu username do GitHub)

═══════════════════════════════════════════════════════════════════════════

🚀 VOLTAR AO TERMINAL - CONTINUE EXECUTANDO
═══════════════════════════════════════════════════════════════════════════

┌─────────────────────────────────────────────────────────────────────────┐
│ PASSO 9: Adicionar GitHub como repositório remoto                       │
└─────────────────────────────────────────────────────────────────────────┘

COPIE E EXECUTE (mude SEU-USERNAME):

cd /Users/joaovarejao/Dev/NAVIGEST
git remote add origin https://github.com/SEU-USERNAME/NAVIGEST.git

VERIFICAR:

git remote -v

DEVE APARECER:
  origin  https://github.com/SEU-USERNAME/NAVIGEST.git (fetch)
  origin  https://github.com/SEU-USERNAME/NAVIGEST.git (push)

┌─────────────────────────────────────────────────────────────────────────┐
│ PASSO 10: Renomear branch para "main"                                   │
└─────────────────────────────────────────────────────────────────────────┘

COPIE E EXECUTE:

git branch -M main

VERIFICAR:

git branch

DEVE APARECER:
  * main

┌─────────────────────────────────────────────────────────────────────────┐
│ PASSO 11: Fazer PUSH para GitHub                                        │
└─────────────────────────────────────────────────────────────────────────┘

COPIE E EXECUTE:

git push -u origin main

PRIMEIRA VEZ: Pode pedir login
  - Username: seu username do GitHub
  - Password: seu Personal Access Token

NÃO TEM PERSONAL ACCESS TOKEN?

Vá a: https://github.com/settings/tokens
  1. Tokens (classic)
  2. Generate new token (classic)
  3. Marque: repo
  4. Clique: Generate token
  5. COPIE o token (nunca mais aparece!)
  6. Use como password acima

DEVE APARECER:
  To https://github.com/SEU-USERNAME/NAVIGEST.git
   * [new branch]      main -> main
  Branch 'main' set up to track remote branch 'main' from 'origin'.

═══════════════════════════════════════════════════════════════════════════

✅ VERIFICAR NO GITHUB
═══════════════════════════════════════════════════════════════════════════

Abra no navegador:
  https://github.com/SEU-USERNAME/NAVIGEST

DEVE VER:
  ✅ 2 ficheiros (.gitignore, README.md)
  ✅ Branch "main"
  ✅ 1 commit ("Initial commit: project structure")

═══════════════════════════════════════════════════════════════════════════

🎉 PARABÉNS! REPOSITÓRIO CRIADO

Agora tem um Git setup profissional!

═══════════════════════════════════════════════════════════════════════════

📖 PRÓXIMOS PASSOS
═══════════════════════════════════════════════════════════════════════════

Leia os ficheiros de orientação criados:

  1. /Users/joaovarejao/Dev/GITHUB_BEGINNERS_GUIDE.md
     └─ Explicação completa do Git/GitHub

  2. /Users/joaovarejao/Dev/GITHUB_SETUP_CHECKLIST.md
     └─ Checklist detalhado com instruções

Depois, quando terminar:

  Vamos começar FASE 1:
    - Criar NAVIGEST.Shared
    - Copiar ficheiros do AppLoginMaui
    - Fazer commits

═══════════════════════════════════════════════════════════════════════════

💡 WORKFLOW NORMAL (Cada vez que fizer mudanças)
═══════════════════════════════════════════════════════════════════════════

1. Editar ficheiros
2. git status                    # ver o que mudou
3. git add .                     # adicionar mudanças
4. git commit -m "descrição"     # criar checkpoint
5. git push                      # enviar para GitHub

═══════════════════════════════════════════════════════════════════════════

⚠️ IMPORTANTE
═══════════════════════════════════════════════════════════════════════════

- Guarde seu Personal Access Token numa pasta segura!
- NUNCA guarde senhas ou secrets no GitHub
- Faça commits regularmente (não deixe tudo para o fim)
- Use mensagens descritivas nos commits
- Sempre faça "git pull" antes de começar
- Sempre faça "git push" antes de sair

═══════════════════════════════════════════════════════════════════════════

✉️ PRÓXIMO PASSO

Quando terminar TODOS os passos acima:
  1. Verifique que tudo está no GitHub
  2. Avise-me
  3. Começamos FASE 1 do projeto

═══════════════════════════════════════════════════════════════════════════

Sucesso! 🚀

